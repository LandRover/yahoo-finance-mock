// Code generated by go-bindata.
// sources:
// fixture/resources.json
// fixture/spec.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fixtureResourcesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x6f\xe3\xb8\x15\x7e\x9f\x5f\x21\xe8\x79\xad\x1e\x5e\xc4\xcb\x00\xfb\x90\x89\xb3\x33\x01\x26\x89\x1b\x3b\xdb\x06\x58\x74\xc0\x58\xb4\x23\x44\x96\xbc\xba\x24\xf5\x16\xf9\xef\x05\xe5\x3b\x29\xcb\xda\x49\xd2\x36\xe8\xbc\xcc\x24\xd2\x47\xf2\x90\x3c\xe7\xe3\xf7\x51\xf9\xd7\x07\xcf\xf3\x73\x5d\x64\x55\x3e\xd6\x85\xff\xd1\x33\x0f\x3c\xcf\x5f\x4c\xe2\x74\xf3\x9b\xe7\xf9\xbf\x57\x59\xa9\x77\x1e\x78\x9e\x7f\x72\x32\xf8\xba\xf7\xc4\xf3\xfc\xc1\xf5\x99\xf5\xc8\xf3\xfc\x44\xa5\xd3\x4a\x4d\x4d\x73\x5f\xa7\xbd\x9b\xa1\xff\xd3\x3e\xa0\xee\x7c\xb4\x98\xd7\x88\xb3\xbf\xde\x9c\x8f\x6e\x1b\x21\xc3\x3a\xca\x4b\x35\xab\x81\x97\xaa\x88\xd4\xef\xde\xb5\x56\x89\x37\x8a\x67\xda\x1b\xe4\xf1\x58\xdb\x0d\xc7\x55\x9e\xeb\x74\xbc\x30\x2d\x6e\x86\x7d\xfb\xb5\x2e\xa6\x83\x6c\x5e\x25\xaa\xd4\x91\xff\xd1\x9b\xa8\xa4\xd0\x16\xa4\xcc\x55\xa4\xd5\x5d\x62\x06\x2d\xf3\xca\x7e\xad\xff\x39\xbe\x57\xe9\x54\xf7\x55\xa9\xfa\x3a\x51\x0b\x1d\x7d\x32\xa3\x81\x85\xcb\xf5\xb4\x4a\x54\x7e\xa1\xf2\x07\x5d\x2e\x43\xfd\xe8\x21\x09\x01\xd0\x36\xa4\x99\x99\x01\x86\x38\x94\x02\x53\xc0\x6d\xe0\xd3\x3a\x12\xff\xa3\x87\x03\xc6\xa5\x94\x98\xb7\xa1\xaf\xe6\xda\xec\x31\x12\x3c\xe0\xad\x31\xf4\xd5\xe2\x4b\x3c\xbd\x5f\xc5\x4b\x5a\x3b\xed\xab\xc5\xd7\xec\x69\xd5\x2d\x0b\xdb\xa0\xbf\x66\x49\x55\x4f\x0e\x73\x61\xa6\x67\xc7\x30\xab\x51\x66\xe3\xaa\xe2\xdb\xea\x97\xf6\x45\xd5\x8f\x71\x56\x15\xa7\x49\x56\xe8\x55\x04\x84\x59\x2d\xee\xe2\xa8\x7e\x25\xdd\x79\xa8\xe2\x61\xf5\x8a\xda\xa1\xdc\xc5\xd1\x30\xfe\xa3\xee\xd4\x6d\x74\xe0\xcd\x4c\x17\x85\x9a\xea\x4f\x99\xca\xa3\x73\x33\xa8\x3f\x89\xd3\xd9\xdd\x37\x4c\x25\xe1\xf6\x44\x26\x55\x92\x9c\xad\x32\x69\x3f\xc1\x3f\x3b\xe5\x92\x64\xe9\x74\x8d\x39\x99\xcf\x13\xed\x9d\xa7\xe3\xc0\xe9\x31\x4e\x55\x3a\x8e\x55\x72\xda\x5e\x01\xea\x51\xe7\xca\xa4\x6f\x9c\x2c\x96\x3b\x42\x2e\xb2\xb4\x34\xbb\x4d\x42\x02\x40\xc0\x99\xb2\xd3\x02\x41\x5f\x99\xfe\x29\x0a\x29\x20\x6c\xef\xfa\x24\x9e\x94\x8b\xd1\x53\xf6\x37\xad\x1f\xbe\x66\x4f\x9b\x2c\xa5\x3c\x10\x44\x4a\x69\xef\x51\x23\x7e\xa0\xf3\xb1\x4e\x4d\x3a\x40\x40\x08\xa3\x98\x87\xf6\x2e\xed\xb6\xbb\x5e\x8d\xe1\x23\x8a\x03\xec\xf5\x56\xa9\xeb\xae\xd2\xb6\x89\xc9\xf1\x4d\x6c\x3d\x33\x0a\x00\x20\x41\x3a\x35\xd9\x86\xd7\x83\x00\x00\x71\x42\x28\x67\xf6\xd2\x59\x33\x33\x59\x63\xc2\x3b\x32\xc2\xa1\xc2\x8b\xe2\xc7\x38\xd2\x69\xd4\x57\xe5\x8a\x23\x58\x88\x42\x0c\x36\xf5\x68\x95\xa7\x71\x3a\x2d\x0c\x97\x14\xa5\x9a\xcd\x57\x84\x82\x81\x8a\xe3\xe0\x61\xa9\xf2\x72\xd5\x02\x21\x41\x8f\xb7\x38\x4b\xa3\x15\x9e\x32\x0a\x0e\xbe\xcc\x55\x9c\xc4\xe9\xf4\x24\x4d\x2b\x95\xf4\x57\x93\xb8\x5e\x4e\x02\x07\xa1\xbd\x1c\x6b\xfc\xe0\xac\x2e\xcf\x80\x08\x10\x42\x74\xea\xf4\x36\xd6\x49\x54\xa7\x0c\x20\x42\x43\x00\x6a\x77\xbe\xe4\x95\x61\xb9\x1c\xbd\x3e\xc0\x0e\x10\x7c\x5d\x92\x17\x4e\x35\xce\x73\x6d\x91\x6f\x0f\x02\x46\xa5\x94\x44\xb6\x43\xf7\x52\x86\x50\x0c\x04\xc0\x2e\x9d\x4d\x93\xed\x39\xc0\x80\x52\xe6\x2c\xea\x06\xb8\x39\x5a\x0c\xc5\xd9\x11\x34\x9c\x16\xdb\x28\x50\x40\x09\x10\xc9\x5b\x49\xbb\xaf\x16\xdb\xd2\xaa\x29\xfe\x60\x6d\xe9\x79\x31\x5a\xed\xca\xe8\x49\x27\x8f\xba\xe6\x15\x23\x32\x90\x29\x2e\x3b\x36\x3d\x2f\x7e\xc9\xf2\x27\x95\xd7\xc9\x43\x02\x87\x46\x8a\x7b\x95\xeb\xe2\xaa\x2a\x8b\x52\xa5\x51\x9c\x4e\x0d\x85\x48\x14\x22\x0a\xe0\x70\xc8\x5d\x96\x3d\xfc\xaa\x92\xaa\xce\xa9\x30\x60\xcc\x2e\x9e\xba\xc8\xfa\x6a\x71\xb2\x64\x33\x33\x26\xc7\x01\x81\x10\x35\xd2\xd7\x16\xb9\xd9\x67\xc4\x03\x4e\xa8\xa0\x76\x2a\x36\xe2\x77\xe9\x0b\x01\x96\x98\x49\x27\x85\x9f\xb2\x2f\x55\x1a\xe5\x3a\xb2\xc2\x42\x81\x00\x6e\x4f\xb0\x09\xbd\x0d\x4d\x04\x98\x60\x22\x6d\xfe\x99\x9b\xe4\x18\x65\x9f\xb2\xcc\x1c\x75\x3c\xa0\x40\xc1\x3d\x78\x97\x6a\xf0\x3c\x2d\x75\xfe\xa8\x92\x3a\xeb\x0e\xd4\x84\xc9\xca\x3f\xb2\x74\x73\x64\x9d\xcc\x74\x1e\x8f\xd5\x5f\x2e\xf5\xd3\xb7\xdb\x2c\x7f\x38\x54\x4b\xeb\x76\xc3\xfb\x2c\x2f\xd7\x8d\xcf\xfa\x23\x1b\x3f\x9d\x95\x57\x93\xc9\x50\x97\x17\x71\x92\xc4\x85\x1e\x67\x69\x64\x12\xa8\x87\xa8\x21\x16\x97\x5a\x0e\x2e\xca\xfe\xfa\x33\x84\xc1\x59\xff\x25\x15\x9c\x2a\x43\x8f\x92\x50\xe0\x04\x03\xe5\x8e\x82\x98\x2c\x93\x74\xc9\x46\xd4\x14\x2e\xa3\x8d\xeb\xfc\x25\xae\xc7\xb3\x19\xa7\xd8\x9d\xf3\xe1\xf3\xbb\x58\xcc\xee\xb2\xa4\xc6\x18\xa1\xbd\xf3\xf2\x79\x17\xe9\x5f\x9f\x7d\xbe\xf9\x7a\x72\xfd\xbe\x64\x77\x07\x69\x67\x11\xf3\x7a\x9a\xff\x6f\x1c\xc3\x02\xca\xa8\x08\xed\x89\x1c\xe5\x18\x90\x61\x18\x32\xbb\xb2\x5f\x93\x62\x58\x20\x59\x83\x21\xe9\x56\x82\x20\x05\xc7\x12\xec\x11\xf7\x4a\x10\x73\x41\x10\x10\x24\xc0\x61\xd8\xfd\x12\xc4\x94\x71\x69\xcb\x34\x9b\xea\x48\x48\x43\xbb\x9f\xf7\x4b\x74\x47\x44\x49\x57\x53\xda\xc6\x53\x2f\xb7\xc6\xad\x6a\xa3\x07\x01\x16\x21\xa6\x58\xd8\x49\xd0\xa2\x37\x44\x80\xd7\x7a\x03\xd8\x9f\x34\x83\x32\x20\x36\x4d\xaf\xcd\xa0\x08\x9c\x4a\x59\x9b\x41\xe1\x9a\xd8\x4e\x66\xf0\x3f\xe6\x06\xff\x9b\xfe\x8d\x05\x21\x07\x80\x46\xda\x6b\xf5\x6f\x98\x53\xc9\xc2\x36\x67\xf5\x62\xff\x86\x82\x50\x4a\x29\x5d\xee\xe8\x62\xdf\x04\x05\xca\x48\x5b\xd3\x1f\xee\xed\x3b\xdd\x1b\x0e\x05\x38\x3b\xdf\xc1\xbd\x11\xe4\x90\xf3\xeb\x5e\x84\x74\xd4\x65\xcd\xf7\x78\x42\x04\xbc\xf5\x5e\x6c\xd7\xbf\x31\xc0\xb4\x15\xbc\x6b\x25\x43\x62\xac\xa4\xbd\x60\xcd\x17\x79\x32\xa0\xad\x8e\x6f\xff\x22\xcf\x39\x7d\x0f\x5d\xe4\x09\x57\x27\x35\x5f\xe4\x21\x1a\x62\x2a\xa9\x9d\x32\x5d\xa5\xec\xe0\x6a\x38\x7a\x5f\x3a\xf6\x60\x32\x38\x82\xed\x70\x32\x08\xe1\x30\xf4\xc1\x64\xe0\x18\x00\x50\xeb\x1d\xf0\x5b\x27\x03\x0f\x68\xc7\x5b\xdd\x90\x03\x11\x60\x67\x6e\xc7\x32\xeb\xe0\x10\x3a\x68\x60\x1a\x22\xc4\xa4\x1d\xef\xeb\xaa\x60\x2e\x30\x71\x2c\x74\x57\x15\xcc\x99\x40\x4e\x71\xef\xab\x60\x26\x29\xc3\x04\x30\x77\x0e\x1a\x4b\x05\x13\x82\x9d\xd3\xce\x51\xc1\x94\x87\x8c\xd9\x53\x7c\xbf\x3a\xb8\x55\xc0\xfe\x39\x6f\xf8\x3f\x68\xfd\xb0\xa0\x22\xb4\xc9\xe1\xe5\xba\x7c\x9e\x15\x65\x07\xca\xda\xc2\x36\x31\xb5\x7e\xd4\x6a\xba\xd5\x14\x40\xb0\x6c\xe5\x2b\xfb\x42\x91\xbe\x8d\xc0\xb7\x57\x7d\xab\xef\x9d\x79\x6f\xf5\x3d\xb6\xb7\xfd\xc7\xd7\x9e\x17\xb9\x05\xa7\xe6\x3a\x38\x05\xc3\x7d\xcd\xd5\xf5\x7a\x4e\x81\x73\x29\xa5\xf3\x49\xa1\x93\x53\x90\x24\x04\x7c\xcc\x01\xfd\x70\x0a\xdf\xe5\x14\x28\x30\xfa\x3a\x4e\xe1\xe8\xbd\xdf\xb1\x8f\x3c\x16\x15\xee\xa4\xe8\x41\xe4\xae\xc8\xe3\x80\x9c\x6f\x81\xf6\x97\x27\x23\x7e\xbf\xf3\x1a\xa7\x45\x60\x6f\x7e\xde\x91\xda\xfe\x70\x70\x7b\xe0\x2f\x37\x0e\xde\x2d\x37\x2b\xf5\xe6\xee\xff\xf1\x79\x38\x38\x7d\xcb\x01\xae\x7e\xfe\xe5\x2d\xbb\xbf\xbc\x1d\x21\x01\x21\x12\xa7\x46\x6d\x33\x00\x78\xcb\xd1\xce\x2f\x07\xc3\xbf\xbf\xe5\x00\x37\xc3\xfe\xe7\x4f\x83\x9f\xdf\x74\x0c\x9d\xe7\x59\x6e\x0f\xd0\xf4\x70\xf9\xe7\x46\x55\x62\x6a\x27\xad\x92\xc4\xce\xf8\xc6\x26\xc6\x88\x65\x51\x5d\x26\x2a\x9f\x56\x33\x9d\x96\xbd\x25\xf2\x27\x1b\x17\xe9\x62\x9c\xc7\xf3\x32\xce\x8c\x0b\xf2\x2f\xe2\xa2\x88\xd3\xa9\xf7\x68\xb4\x9a\x37\xc9\x72\xaf\xbc\xd7\xde\x6f\xab\x8a\x29\x7e\xf3\xbd\x75\x87\xfe\x5e\x4f\xcf\xcd\x35\xf4\x61\xf7\x7f\xf3\xef\xf3\x87\xe7\x0f\xff\x0e\x00\x00\xff\xff\x5d\xea\xf7\xbf\x44\x25\x00\x00")

func fixtureResourcesJsonBytes() ([]byte, error) {
	return bindataRead(
		_fixtureResourcesJson,
		"fixture/resources.json",
	)
}

func fixtureResourcesJson() (*asset, error) {
	bytes, err := fixtureResourcesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixture/resources.json", size: 9540, mode: os.FileMode(420), modTime: time.Unix(1526351722, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixtureSpecYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8c\x41\x0e\x83\x20\x10\x45\xf7\x9c\xe2\x87\x3d\x75\xd9\x84\x6b\xf4\x04\x14\x87\x38\x49\x05\x9c\x01\x1b\x6f\xdf\x58\x63\xed\xee\xe7\xfd\x97\xe7\x9c\x33\x4a\xb2\x72\x24\xf5\x06\xb0\x5b\xe2\x6c\xf7\x05\xd4\xd0\x26\x3d\x26\x60\x87\xf5\x3e\x24\xce\x21\x47\x1a\x96\x5e\x1a\xd9\xf3\xda\x4d\x09\x33\x35\x12\xbd\x98\xc3\x48\x1a\x85\x6b\xe3\x92\x3d\xec\xa3\x52\xe4\xc4\xa4\x78\x4f\x1c\x27\xe8\x36\x3f\xcb\x4b\xd1\x0a\xaa\x94\x95\x47\xc2\x37\xab\x48\x45\x6e\xf6\xd7\x01\x72\x98\xc9\x9f\xfe\x1f\x17\x5a\x3a\x0b\x8d\x1e\x4d\x3a\x99\x0b\x6b\xe9\x12\xc9\x1f\x3d\xf3\x09\x00\x00\xff\xff\xa9\x2f\x74\x9e\xe3\x00\x00\x00")

func fixtureSpecYmlBytes() ([]byte, error) {
	return bindataRead(
		_fixtureSpecYml,
		"fixture/spec.yml",
	)
}

func fixtureSpecYml() (*asset, error) {
	bytes, err := fixtureSpecYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixture/spec.yml", size: 227, mode: os.FileMode(420), modTime: time.Unix(1526351673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fixture/resources.json": fixtureResourcesJson,
	"fixture/spec.yml": fixtureSpecYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"fixture": &bintree{nil, map[string]*bintree{
		"resources.json": &bintree{fixtureResourcesJson, map[string]*bintree{}},
		"spec.yml": &bintree{fixtureSpecYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

