// Code generated by go-bindata.
// sources:
// fixture/resources.json
// fixture/spec.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fixtureResourcesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x4b\x73\xdb\x3a\x96\x80\xf7\xf9\x15\x2a\x2f\x66\xd5\xc6\x3d\x78\x03\x99\xea\x85\x63\x3b\xb9\xa9\x4a\x1c\xb5\x65\xf7\x74\x36\x93\x62\x2c\xda\x51\x45\x96\xdc\x94\x94\x8c\x7b\xea\xfe\xf7\x2e\x92\xb2\x1e\x38\x00\x08\xc9\x94\xdb\xbe\xd1\xe6\x5e\xc7\x04\x49\x90\x3c\x8f\xef\x3c\x00\xff\xff\xab\x4e\xe7\xa0\xc8\x27\xe3\x59\x71\x95\x4f\x0e\x5e\x77\xca\x5f\x74\x3a\x07\xf7\xd7\x83\xd1\xe2\x5f\x9d\xce\xc1\x3f\x67\xe3\x69\xbe\xf2\x8b\x4e\xe7\xe0\xe8\xa8\xfb\x61\xed\x37\x9d\xce\x41\xf7\xfc\xd4\xf9\x55\xa7\x73\x30\xcc\x46\x37\xb3\xec\xa6\x3c\xfd\x20\x1f\x1d\x5e\xf6\x0e\xfe\xb2\x3e\xa0\xba\xf8\xc5\xfd\x5d\x35\xe2\xf4\x6f\x97\xef\x2f\x3e\x7b\x87\xf4\xaa\x59\x9e\x65\xb7\xd5\xc0\xb3\x6c\xd2\xcf\xfe\xd9\x39\xcf\xb3\x61\xe7\x62\x70\x9b\x77\xba\xc5\xe0\x2a\x77\x4f\xbc\x9a\x15\x45\x3e\xba\xba\x2f\xcf\xb8\xec\x9d\xb8\x87\xf3\xc9\x4d\x77\x7c\x37\x1b\x66\xd3\xbc\x7f\xf0\xba\x73\x9d\x0d\x27\xb9\x33\x64\x5a\x64\xfd\x3c\xfb\x3a\x2c\x6f\x3a\x2d\x66\xee\xe1\xfc\xff\xae\xbe\x65\xa3\x9b\xfc\x24\x9b\x66\x27\xf9\x30\xbb\xcf\xfb\x6f\xca\xbb\x81\x33\xae\xc8\x6f\x66\xc3\xac\xf8\x98\x15\xdf\xf3\x69\x3d\xd5\xd7\x1d\x6a\x81\x80\x88\x8d\x2c\x9f\xac\x1c\x28\x99\xb4\x86\x09\x60\xb1\xc1\xc7\xd5\x4c\x0e\x5e\x77\x18\x51\xda\x5a\xcb\x74\x6c\xf4\xa7\xbb\xbc\xfc\xc6\xd4\x68\xa2\xa3\x73\x38\xc9\xee\x7f\x1f\xdc\x7c\x9b\xcf\x97\x47\x2f\x7a\x92\xdd\x7f\x18\xff\x9c\x5f\x56\xc9\xd8\xd0\xbf\x8f\x87\xb3\xea\xe1\x98\x36\xe5\xe3\xb9\x73\xb8\xad\x46\x95\x1f\x6e\x36\xf9\x32\xff\x47\xfc\xa5\xe6\x3f\x06\xe3\xd9\xe4\x78\x38\x9e\xe4\xf3\x19\x70\xe5\x9c\xf1\x75\xd0\xaf\x0e\x59\xfc\x1c\xd9\xe4\xfb\xfc\x90\x70\xa7\xf2\x75\xd0\xef\x0d\xfe\x55\x5d\x14\x9f\x14\x38\x72\x9b\x4f\x26\xd9\x4d\xfe\x66\x9c\x15\xfd\xf7\xe5\x4d\x0f\xae\x07\xa3\xdb\xaf\x5f\x98\xb0\x5c\xbb\x0f\x72\x3d\x1b\x0e\x4f\xe7\x92\xb4\x2e\xe0\xef\x90\xba\x0c\xc7\xa3\x9b\x87\x31\x47\x77\x77\xc3\xbc\xf3\x7e\x74\x45\xd0\x15\x07\xa3\x6c\x74\x35\xc8\x86\xc7\x71\x0d\xc8\x7e\xe4\x45\x56\x8a\xef\x60\x78\x5f\x7f\x11\xfe\x71\x3c\x9a\x96\x5f\x9b\x4b\x0e\xc0\x01\x3d\x32\x3a\x83\xc2\x49\x56\x5e\x5f\x50\x29\x80\x32\xf7\xab\x5f\x0f\xae\xa7\xf7\x17\x3f\xc7\xff\x93\xe7\xdf\x3f\x8c\x7f\x2e\xa4\x54\x68\x62\xb8\xb5\xd6\xfd\x46\xde\xf1\xdd\xbc\xb8\xca\x47\xa5\x38\x00\xe1\x5c\x09\xa6\xa5\xfb\x95\x56\xcf\x3b\x9f\xdf\xe3\x80\x0a\x46\x58\xe7\x70\x2e\xba\xf8\x2d\x2d\x4f\x29\x65\x7c\x31\xb7\xc3\xf2\x2e\x00\x40\x0d\x4f\x3a\x65\x39\xbd\x43\x20\x00\x54\x73\x2e\xb4\x72\x5f\x9d\xf3\x64\xa5\xd4\x94\xd3\x6b\xb8\x43\x48\xf1\xfa\x83\x1f\x83\x7e\x3e\xea\x9f\x64\xd3\xb9\x8d\x50\x92\x4a\x06\xae\xe9\xc9\xb3\x62\x34\x18\xdd\x4c\x4a\x5b\x32\x99\x66\xb7\x77\x73\x83\xc2\x40\x98\xe6\xc1\xbd\x69\x56\x4c\xe7\x67\x50\x6a\x44\xf3\x19\xa7\xa3\xfe\x7c\xbc\x50\x02\xd0\xf8\x69\x91\x0d\x86\x83\xd1\xcd\xd1\x68\x34\xcb\x86\x27\xf3\x87\x38\xaf\x1f\x82\x11\xe9\xbe\x8e\x87\xf1\xdd\xd3\x4a\x3d\x09\x37\x60\x8c\x49\xba\xe8\xe7\x41\x3e\xec\x57\x22\x03\x94\x0b\x09\x20\xdc\x8b\xd7\x76\xa5\x37\xad\xef\x5e\x39\xb0\x80\x81\xaf\x54\xf2\x23\xd2\xc6\xbb\x22\x77\x8c\xef\x21\x10\x25\xac\xb5\xdc\xc6\x87\xae\x89\x0c\x17\x0c\x38\x80\xab\x3a\x8b\x53\x96\x7e\x40\x81\x10\x0a\xbd\xd4\xc5\xc0\x85\x6b\x29\x4d\x9c\x3b\x03\x8f\xb7\x58\xce\x82\x12\xc1\x81\x5b\x1d\x35\xda\x27\xd9\xfd\x52\xb5\x2a\x13\x1f\xd4\xad\xfc\x6e\x72\x31\xff\x2a\x17\x3f\xf3\xe1\x8f\xbc\xb2\x2b\x25\x64\xd0\x52\xb9\xdc\xb9\xe5\x77\x93\xb7\xe3\xe2\x67\x56\x54\xc2\xc3\x09\x32\x23\x93\x6f\x59\x91\x4f\x3e\xcd\xa6\x93\x69\x36\xea\x0f\x46\x37\xa5\x09\xb1\x54\x52\x01\x80\x6c\xc8\xd7\xf1\xf8\xfb\xdf\xb3\xe1\xac\x92\x29\x49\x94\x72\x95\xa7\x52\xb2\x93\xec\xfe\xa8\xb6\x66\xe5\x3d\x35\x23\x1c\x24\xf5\x9a\xaf\xe5\xc8\xc5\x77\xa6\x9a\x68\x2e\x8c\x70\x45\xd1\x3b\x7e\xd5\x7c\x51\x60\x96\x29\x8b\x44\xf8\xe7\xf8\xf7\xd9\xa8\x5f\xe4\x7d\x67\x5a\x94\x18\xd0\xee\x03\xfa\x46\x2f\xa7\x66\x08\xe3\x8c\x5b\xd7\xfe\xdc\x95\xc2\x71\x31\x7e\x33\x1e\x97\xae\x4e\x13\x01\x02\xb0\xe3\xad\x69\xf0\xfd\x68\x9a\x17\x3f\xb2\x61\x25\x75\x01\x9d\x28\xa5\xf2\x5f\xe3\xd1\xc2\x65\x1d\xdd\xe6\xc5\xe0\x2a\xfb\xed\x2c\xff\xf9\xe5\xf3\xb8\xf8\x1e\xd2\xa5\x87\xf3\x7a\xdf\xc6\xc5\xf4\xe1\xe4\xd3\x93\x0b\x77\xfc\xcd\xed\xf4\xd3\xf5\x75\x2f\x9f\x7e\x1c\x0c\x87\x83\x49\x7e\x35\x1e\xf5\x4b\x01\x3a\xa4\xa2\x34\x2c\xd8\xb4\x04\x5f\xca\xfa\xfb\x57\x94\x01\x7a\xff\xb5\x29\x38\xce\x4a\xf3\x68\xb9\x00\xcd\x19\x08\x8d\x08\xe2\xba\x16\xd2\xda\x1a\x89\x52\x71\x95\xf0\xbe\xe7\xdf\x07\xd5\xfd\x5c\x8b\x33\x59\x7d\xe6\xb0\xff\x9e\xdc\xdf\x7e\x1d\x0f\xab\x31\x25\x68\xaf\x1c\xfc\x63\x75\xe4\xc1\xf9\xe9\xbb\xcb\x0f\x47\xe7\x2f\x0b\xbb\x13\xd0\xce\x31\xcc\x0f\x8f\xf9\xab\xd9\x18\x45\x84\x12\x46\xba\x0f\xd2\x68\x63\xc0\x4a\x29\x95\xab\xd9\x6d\x9a\x18\x45\xac\xf2\x04\x24\x69\x2a\x08\xd6\x68\x66\xc1\xbd\xe3\x9a\x0a\x32\x6d\x38\x05\x4e\x0d\x20\x0b\xbb\xae\x82\x4c\x28\x6d\x5d\x4c\x73\x4d\x1d\x97\x42\xba\xd7\x79\xb9\x86\xae\x01\x4a\x52\x83\xd2\x98\x9d\x7a\x7c\x68\x1c\xa5\x8d\x43\x20\xcc\x48\x26\x98\x71\x85\x20\xc2\x1b\x86\xb0\x07\xde\x00\xb5\x61\x30\x68\x09\x77\xcd\xf4\x43\x30\x68\x08\xd2\x94\x87\x60\xd0\xe0\x20\x36\x29\x18\x7c\xb2\x68\xf0\x3f\x19\xbf\x29\x22\x35\x00\x78\xcd\x5e\x34\x7e\x63\x5a\x58\x25\x63\x91\xd5\xa3\xe3\x37\x4a\xa4\xb5\xd6\x62\xdb\x91\x12\xbe\x19\x01\x42\xf1\xd8\xa9\xfb\xe8\x6d\xcb\xe8\x8d\x49\x03\xe8\xcb\x27\x44\x6f\x9c\x22\xe3\xdc\x6e\x22\x24\x91\xcb\xfc\x79\x3c\x63\x88\x8e\xe6\xc5\x56\xe3\x37\x05\x4c\x44\x07\xaf\x86\x92\x92\x97\xa1\xa4\xfb\xc2\xfc\x89\x3c\x4b\x44\x34\xe2\x5b\x4f\xe4\x21\xef\x1b\x4a\xe4\x19\xcc\x49\xfe\x44\x1e\x15\x92\x09\x2b\x5c\x91\x49\x45\xd9\xee\xa7\xde\xc5\xcb\xe2\xd8\xa0\x30\x20\x60\x0b\x0b\x83\x31\xc8\x42\x07\x85\x41\x33\x00\xa0\xd1\x1c\xf0\xae\x85\x41\x13\x91\x98\xd5\x95\x1a\xb8\x01\x57\x72\x13\xd5\x2c\x21\x42\x48\x60\x60\x21\x29\x55\xd6\x9d\x6f\xbb\x14\xac\x0d\xe3\x28\x84\x4e\xa5\x60\xad\x0c\x45\xca\xbd\x4e\xc1\xca\x0a\xc5\x38\x30\x8d\x1c\x8d\x43\xc1\x9c\x33\xe4\xed\x10\x05\x0b\x2d\x95\x72\x1f\xf1\xe5\x72\x70\x14\x60\x37\x8b\x0d\x9f\x61\xe8\xc7\x8c\x30\xd2\x35\x0e\x8f\xe7\xf2\xbb\xf1\x64\x9a\x60\xb2\x96\xc3\x16\x73\x8a\x16\xb5\x7c\x59\x4d\x03\x9c\xd9\xa8\xbd\x72\x13\x8a\x62\x37\x80\xef\xbe\xf5\x25\xdf\xa3\xe7\x5e\xf2\x3d\x73\x3f\xfb\xbe\xda\xf3\xa8\x68\x01\xe9\x5c\x42\xa4\x50\xda\x3e\xbf\x76\xb5\x17\x29\x68\x6d\xad\x45\x25\x85\xa4\x48\xc1\x72\x09\xac\x29\x02\xda\x47\x0a\x5b\x45\x0a\x02\x94\x68\x27\x52\x68\xcc\xfb\x35\x15\x79\x1c\x53\xb8\x22\xa2\xc1\x91\xab\x90\xa7\x81\xa2\x5a\xa0\x5b\x79\x2a\xe1\x77\xcb\x34\x4e\x04\xb0\x17\x3f\xaf\xa0\xf6\x41\xaf\xfb\x79\x17\x9d\x1b\x17\x6f\x9f\x8a\xbb\x5f\x2e\xb0\x3c\xde\x7b\x27\x90\xf1\xfd\xb4\x7f\x9e\x4f\x67\xc5\xa8\xb6\x52\xa8\x3c\xf1\xa0\x44\x17\xdf\x8a\xbc\xa6\xa2\x7a\x78\x35\x71\x49\x74\x0a\x1a\x59\x09\x92\x53\xab\x1a\xaa\x5f\x95\x17\x15\x44\xa3\xf8\x22\x84\x3d\x9a\x30\x2b\x00\x94\x37\x39\x14\x85\x69\xa6\xa5\x94\x94\x21\x8b\xe1\xa7\x7d\xa6\x34\x11\x5c\x20\xaa\x8e\xe2\xbe\x20\x52\x49\x86\x22\xfd\x44\xda\xa7\x1a\x34\x28\xe6\x37\x04\x35\xee\x33\x69\xa4\x10\xca\x6a\x8e\x7a\x50\x52\x8d\x41\x73\x45\x3b\x06\xcd\xb8\x9c\x0d\x84\x52\x6b\xad\x44\x61\x67\xb0\x9c\x0d\x04\x84\xa0\x54\x1a\x94\xe7\x09\x94\xb3\x8d\xa7\x80\xe6\x94\xb3\x99\x66\x04\xcd\x60\x2d\x96\xec\x75\x4f\xce\x3b\xbd\xff\xea\x76\x24\x40\x94\x1c\xf1\x74\x2d\xd3\x4a\xa0\x74\x5f\x10\x53\x99\x06\xc2\x4a\xd2\x28\x27\xc5\xed\x46\x98\xca\x94\x45\x2c\x5a\x53\x6a\xf5\x84\xfe\x34\x74\x75\x28\x9c\x86\xf6\x9c\x14\x02\xd8\x10\xa6\x2a\xaa\x80\x29\x96\x04\xaa\x9f\x7b\xa7\x47\xc5\x55\x16\x03\xd5\xf9\xb7\xc8\x6e\xef\xfe\xbb\xfa\x1e\x1d\x8f\x6f\x68\x01\x59\x29\x50\x56\x32\xab\x6b\xaf\xc2\xcc\xaa\xad\x31\xa0\x91\x20\x85\x98\x95\x6f\x9b\xe1\xa6\x52\x72\xce\xa2\xbd\x43\x4b\x71\xe2\x92\x08\x5e\x8a\x93\x51\x44\x9a\x0d\xc0\x55\x10\xa9\xad\x35\xb1\xd9\x85\xc0\x55\x82\xd1\xa8\x1e\x86\xb1\xb5\x9e\x5b\x33\xb7\xd6\x53\x8f\x40\x55\xf7\xf8\x1f\x49\xc9\x33\x9c\xe6\x68\xa5\x1d\x32\x9a\xb2\x9a\xa7\xcc\x4a\xb5\xe6\x89\x8d\x90\xb5\xe6\x27\xa5\xcc\x6a\x6b\x91\x94\x32\xd3\x0c\x14\xb7\x28\x8a\xc5\xee\xfa\x2c\xfb\xd1\xe0\xb1\x17\x44\x58\xb2\xde\x2a\x10\xae\x65\x5c\xdb\x6a\x1e\x78\x3a\xf2\x0b\x09\x0d\x89\x8b\x82\x93\x7e\x47\xe5\x3e\xbf\xdc\x44\xd3\x1d\x0b\xa9\x61\x84\x36\x25\x4f\x17\x52\xc3\xb1\x1d\x0f\x49\x0d\x25\x26\x3a\xcb\x65\xa2\x95\x6b\x6b\x24\x8a\x2f\x9e\x16\xda\x38\xe5\xd6\xfa\x3b\x32\x1b\xa0\x4d\x71\xc0\xa5\xb6\x96\xa1\xcd\x48\x86\x92\x9e\xc9\xd0\x46\x85\xe4\xa8\x08\xec\x42\x9b\xe2\x1a\x98\x46\x5f\x6c\x1f\xa8\x44\x03\x95\x64\x80\x4b\xec\x06\x4a\x44\xe4\x06\xc7\x14\xe3\xe3\x38\x49\xa6\x13\x64\xa9\xdd\x15\x41\x96\x16\x61\x33\x82\xf4\x19\xbb\x25\x42\xfa\x72\x96\x0f\x87\x5c\x50\x58\x22\xa4\xeb\xe2\x97\x08\xe9\x9e\xb3\x27\xc8\x8d\x09\xd2\x6c\xd3\xe3\x4e\xa5\x14\x54\xa3\x85\x19\xed\x13\xa4\xb4\x16\xb5\x42\x26\x12\x24\x28\x5c\xca\x6f\x99\x21\xdb\x4e\x65\xec\x8e\xa5\x5a\xa9\x5e\x3f\x1d\x48\x79\xaa\x3b\x87\x40\x14\x55\x12\xa7\x2a\x1b\xc2\x67\xc6\xb4\xe5\x3c\x4e\x2b\xae\xf5\x93\x66\x27\xd6\x0f\x55\x0a\x96\xd6\x0f\x1d\x5a\x5a\xbf\x70\x99\x07\xad\x49\xda\x5b\xbf\x8d\xac\x9f\x26\x8c\x02\xa0\xf0\x27\xc1\xfa\x19\x90\xb8\x32\xde\xb2\xf5\xe3\xc4\x72\x6b\x71\x61\x3d\xc1\xfa\x09\xa3\x04\x93\x08\xfc\x9f\x16\xba\x2d\x17\x80\xd2\x89\x09\xcc\x5d\x3e\xb3\x95\x29\x40\xbc\x2d\x73\x4b\xc2\x40\x32\x4b\xb7\xcd\x94\x5a\xa1\xb8\x36\x71\xe8\xb6\x54\x72\x90\x54\xa1\x05\x18\x09\xe0\x19\x6d\xd0\xff\x85\x99\x3d\x19\xc8\xb7\xcc\xed\xe0\x46\xdb\x16\x1a\xa3\x80\x28\x06\xc0\x24\xaa\x19\x3c\x71\xbc\x8e\xe0\xc5\x1f\xaf\x4b\x90\x40\x95\x6e\x5e\x1b\xf8\xd2\xc1\x29\xa1\xc2\x19\x2e\xac\x1e\x96\x5c\x21\xad\x14\xc8\x79\x84\x4a\xac\x60\x5d\x6b\x83\x1b\x5d\xaa\x30\x88\xf3\x90\x42\xa7\x17\x5a\x5d\x14\x5c\xfc\xbc\x5a\x67\xfd\xdf\x77\xbd\xee\xf1\x0e\x2a\xad\xef\xcf\x4e\x4e\x91\xca\x35\x95\x4c\xd7\x34\x3b\xa1\x4c\xb2\xf2\xca\x38\x41\x19\xf0\x70\x56\x56\x52\x24\x6b\x81\xac\xac\x24\xcc\x00\x6a\x10\x0c\xa4\x66\x65\x43\x86\x6f\x2d\x37\xab\x08\x6a\xc0\x0f\x26\x67\x05\x41\x69\xab\x40\x77\xab\xe1\x92\x4b\xae\xb7\x59\xa8\xbe\xa1\x65\xf6\x1d\x7f\x5c\x5d\x6f\xd5\x5e\xf7\xce\xba\x0d\xbd\x94\x95\xdb\x97\x8c\x50\xea\x2f\x2e\xf8\x68\x04\x88\x2d\x3f\x7d\x12\xbd\xac\xe3\x88\xd2\x92\xe9\xf4\xb2\xad\x26\x16\x58\x4a\xc2\x70\x99\x01\x94\x84\x2a\xcd\xd0\x52\xbe\x54\x1a\x51\x46\x29\x85\xda\x5e\x5f\x2e\x27\x34\x95\x43\xb9\x06\x25\x90\x91\x8c\xd5\x43\x4b\x25\xaa\x0b\xa2\xa5\xea\x6d\x5a\x11\xd5\xd8\x77\xcc\x43\xba\xf2\x18\x72\xeb\x0f\x31\x1d\xb7\x24\xbc\x51\x83\xfb\xcc\xcb\x98\x0e\x15\xcc\x03\x31\x5d\x65\x65\x2b\x0b\x9e\x10\xd5\x79\x74\x2a\xda\x6b\x27\x80\x59\x65\xd1\x3b\x0e\x47\x5e\x5c\x51\x23\x18\xd7\xd2\x9d\x7e\x38\xf6\x02\xc2\x25\x42\xa8\x84\xd0\x4b\x0b\xca\xfd\x2b\x0e\x3d\xa1\x17\x23\xba\x2a\x85\x1b\xcd\x88\xd9\xa4\xeb\x4e\x58\x62\x00\xaf\x78\x4f\x4a\x3d\x31\x2a\x98\x45\x4b\xfe\xbc\x04\x55\xce\x2f\x05\xa1\xaa\xe9\x3f\x1a\x0b\x6a\x8f\x1f\xcc\x11\xb5\x54\x6f\xf3\xfa\x7f\x4f\xa2\xe8\x6d\x91\xe7\x55\x9a\x68\x3a\xb8\xcd\x3b\x7f\xab\xf6\xf0\xd9\x8c\x1a\xd2\xf2\xee\xe1\xe4\xa7\x25\xa8\x9f\x3e\x45\x00\xa9\x62\xc8\x22\xb4\x2e\x80\x12\x08\xb7\x80\x5a\x2e\xd2\x04\x90\x0b\x83\xbb\xfe\x5b\x17\xc0\x14\x68\x7b\xd4\x06\x44\x4c\x33\x46\x50\x00\x1d\x29\x9d\x52\x9b\xb0\xa7\xc4\x7c\xe5\x92\x05\x30\xe8\x33\x06\x62\x32\x46\x9a\xb6\x15\x5a\xc6\x64\x8c\x34\xae\x19\x7d\xa0\x3b\x06\x04\xad\x89\xf0\xd3\x9d\x95\xda\x58\x2a\xe2\x31\xe4\xba\xd7\xab\x2e\x5e\xa7\x31\xcb\x29\x6d\x9a\xc7\xf4\x50\xf5\x22\x91\x49\x09\x6a\x47\x5e\x64\x32\x19\x41\xa9\xa4\x5f\xd0\xed\x35\x00\xed\x8e\x53\x27\xbe\xe3\xad\x30\x34\x57\x81\xac\x67\x03\x42\x4b\x0e\x0c\x35\xaf\xb4\xca\xd0\x82\x48\xad\x11\xe2\x26\x23\xb4\x12\x8a\xa1\xca\xca\xb3\x21\xe8\x4d\xf7\x1a\xf3\x39\x05\x46\x95\xb2\x16\x19\xd3\x68\xaa\x31\x15\x1c\xda\x28\x2e\x6d\x93\x35\x48\x75\x2e\x2d\xc8\xbe\x24\x0a\x28\xf7\xba\xca\xb8\xec\x1b\x09\x0a\x50\x0d\xa3\x55\xd9\xb7\xc4\x50\x8d\x48\x21\x55\xf6\x8d\x02\x8e\x77\x9e\x7a\x3e\xc2\xff\x98\xcd\x27\x3c\xa6\xb7\x21\xba\xa4\x1a\xb4\xc4\xd5\x87\x58\xb5\x70\xbe\x2a\xac\x75\x3f\xab\x2c\x25\xd8\x17\xcd\xfd\xac\xe0\x04\x6d\x85\xf5\x0b\xfa\xd9\x70\x78\x99\xb4\xf0\x6b\x1d\xec\x2d\x37\x16\x01\x64\xfb\x91\xa5\x24\x54\x82\x7f\xa1\x65\x63\x53\x83\x64\x42\xe0\x3d\x9f\xda\x06\xfb\xe4\x16\xa3\x15\x50\xd7\xf8\x7e\x41\x50\xd7\x00\x89\xc5\x13\x51\x6d\x56\x07\x68\xd9\xc4\xd3\x72\x3a\x4d\x5e\x56\x4e\xb5\x65\x94\x83\x42\xb2\x9d\x14\x2b\xb5\x95\x86\xdd\x64\xeb\x2a\x5f\xdd\x23\xe6\xf8\x17\x3f\xaf\x96\x12\x3e\xfd\xf5\x6d\xa0\x90\x10\xcc\x30\xf8\x09\xc2\x7f\xf9\xb3\xcf\x17\xd4\x80\xa4\xe6\xb8\x14\x1c\x05\x00\xbb\xbc\xdb\xfb\xb3\x6e\xef\x1f\x3b\xa8\x8b\x7c\xbc\xbc\xb8\x3c\xfa\xf0\xf6\xf2\x0c\x71\x8c\x27\x39\x32\xc7\x99\x47\xa4\x45\x36\x12\x02\x9c\xae\x8f\x55\xe0\x28\xae\x51\x62\xc4\x52\x9c\x28\x0b\x46\x26\x23\x16\x61\xdc\x52\x81\xc2\x84\xe6\x0d\x0b\x29\x57\x0a\x2f\xc9\x0a\x20\x96\xa2\x44\x02\x43\xdd\xf1\x51\xc2\xb2\x44\x30\xad\x00\x55\xfc\x13\x37\xf4\x93\x9c\x19\xbc\x11\xe3\x9f\x83\xb0\xce\x8e\x9e\xc3\xf6\x5e\xbe\xe3\x0d\xbb\x89\x4a\x63\x0d\xb0\x68\x6d\xcd\xa5\x35\x65\x89\x41\x3b\xb4\x86\x56\xd6\x1b\xca\xc0\xf2\xb4\x9e\xab\xaa\x63\x6e\x03\x82\x42\x78\x17\x04\xa7\x54\x5e\x62\xbc\xde\x90\xaa\x61\xcd\x0d\x16\x6e\x61\x8d\x62\x4a\xc5\x50\x63\x41\x4d\x42\x13\xce\x3b\x87\x55\x31\x8e\x27\x13\x53\xec\x11\x7c\xa0\xd4\xf0\xc8\xf5\xce\xce\xd1\xde\xad\x39\x23\x54\xd3\x74\x86\xad\xf6\x2d\x50\x8d\xd3\xc7\xab\x6d\x72\xdd\x62\xfc\x76\x36\xea\x4f\x3a\x95\x8e\x8f\xf2\x69\xe7\x72\x38\x2d\xb2\x5e\x7e\x35\x1d\x17\x9d\xde\x8f\xab\x68\x11\xdc\x7b\xd2\xfc\x92\x7f\xe9\x20\xa5\xf3\x62\x99\xef\x09\x82\xa5\x71\xab\x0c\x8a\x3b\xfd\x50\x46\x71\xfd\x7a\x49\x0c\xb5\xf7\x0c\xa6\x0a\x5a\xaa\x31\x3c\x63\x5f\x1a\xa8\x42\xec\xfd\xe9\xde\x9f\xee\xfd\xe9\xde\x9f\xee\xfd\xe9\xea\xb0\x3f\xb7\x3f\x8d\xb7\x6e\xb5\xe2\x4f\xdb\x48\xbd\x87\x9d\x69\x83\x73\xdc\x3b\xa9\x4d\x9d\xd4\x4b\x37\xa2\x8f\xd2\xc7\x9d\x58\xe0\x4d\xd7\x71\x6e\x68\x07\xf6\x06\x7e\xb7\x06\x7e\x43\x2c\x7e\xc1\x90\xd7\x7e\x8f\xad\x27\x73\xfb\x1f\x76\x5b\xa9\x3d\xbe\x8f\xa0\xdc\x98\x67\x5c\xfc\xbc\x9a\xce\xbd\xec\x9d\xbc\x7b\xd3\xfd\xeb\x2e\x32\xba\xc7\x97\xe7\xe7\xa7\x67\xc7\x68\x43\xdf\x55\xb7\xf9\xee\x0d\xaa\x8d\x05\x9c\x14\x10\xcd\xac\x35\xf1\x95\x8a\x0f\xdf\x14\x88\xe6\x06\x2d\xbf\x08\x76\x3b\x01\x50\x66\xad\xd5\xa8\x91\xd9\x57\x48\x29\xaf\xdd\xfc\x87\x76\xe6\x4a\x0f\x44\x0b\x88\xaf\x2d\x59\x54\x52\xca\x0b\xcb\x26\x36\xa8\xc7\x51\x05\x12\x3f\x1f\x36\x4d\x40\x94\x95\xb2\xa9\x98\x56\x5f\xd3\x8a\x78\x1d\xc9\x53\x72\xa3\x5a\x6a\xae\xe2\x6f\xcd\xf5\xc8\xf5\xeb\x73\x4f\xa9\x8b\xba\xfe\xcf\x56\x17\x75\xeb\x63\x28\xac\x5d\xb5\x43\x97\xbd\x93\xdf\x3c\x02\xd5\xdc\x86\xc0\x29\x13\x4c\xa1\x42\x5f\x14\x80\xea\xad\xe6\x05\x55\x68\x65\xfe\xaa\x9a\xc7\xf6\x2a\x3c\xc6\xaa\x11\xae\x09\x0a\xa6\xa2\x4d\x81\x8b\x1a\x5b\x43\x77\xc7\xea\xfc\x19\xe3\x9a\xa2\x66\xe1\xed\x9d\xc8\xe9\xac\x18\xdf\xe5\xbf\x7d\x18\x8f\xfa\xe3\xd1\x46\x1e\xe4\x0d\xb6\xd5\x21\x0f\xc2\xd5\x8e\xfc\xc7\x46\xed\x32\x1e\xe6\x01\x02\x82\x45\x37\x22\xf5\x12\x0f\x28\xaa\x84\x8d\xb6\x52\x2f\x88\x67\xae\xce\x9d\xc3\x07\x7d\x4d\x2f\xac\x03\x01\x29\x75\xc3\x66\x06\xa1\xca\xba\x06\x26\x15\x6a\x5c\x0c\x76\x7d\xcc\x0d\x59\x3d\xcd\xd2\xfc\xb9\xd3\x6c\xb3\x15\xe3\xdd\x9b\xee\x17\xd4\x19\xe5\x43\x76\x8f\xba\xed\x04\xb9\x53\x3b\x8b\xa8\x54\x02\x50\x2b\xcd\x12\xd8\xaf\xae\xee\xb7\x2e\x4f\x2e\x31\x60\xe1\xdf\x83\x31\x72\x4b\x39\xe7\x90\xb7\x7f\x4c\xc6\xd9\x63\xcc\x83\xee\x5e\xc5\x7b\x85\xd7\xdd\x3d\x57\x12\x3c\x3b\x83\x3f\x17\x77\xbf\x33\x1f\x9e\xe6\x8c\x97\x0e\x57\xd1\x4d\x91\x40\x58\x2e\x98\x40\x62\xbd\xf4\xef\xf8\x3b\x6d\xe1\xc3\xe7\x14\x24\x05\x24\x2d\x6d\x9f\xdf\x1a\xc0\xc4\x37\x8a\x5c\xdb\xd9\x52\x02\xfa\x63\x18\x69\x1e\x77\x9b\x8c\xf4\x2e\x9b\xd5\x9e\x9d\x85\x8c\x79\x50\x90\xcc\x5a\xb4\xdf\x57\xb3\x17\x95\x86\x69\xc0\xfb\x98\xec\xc2\x8d\x1a\x5a\xfd\x85\xd0\x6d\xfc\x28\x67\x54\xa6\x77\x4f\x36\xfa\xd1\x06\x9a\xdc\x60\x01\x50\x00\x10\x41\x69\xa6\xfd\x59\x9c\x86\xbe\x5e\x63\x95\x44\xb4\xde\x08\xd4\x65\x80\x4d\xd5\xb6\x7b\xf4\x82\x61\x94\x59\x83\x6c\xe5\xaf\x4a\xb4\x29\x2c\xb1\x09\x29\xb4\x91\x4d\xdf\x27\x05\xf6\x49\x81\x7d\x52\x60\x9f\x14\xf0\x9f\xf4\xec\x4c\xe8\x3e\x29\xb0\x4f\x0a\xbc\xcc\xa4\x40\xb4\x71\xdd\xeb\xeb\x5f\xb9\x3f\xd5\xff\x2f\xff\xfb\xc7\xab\x3f\x5e\xfd\x3b\x00\x00\xff\xff\x9a\x20\x76\xcb\x6f\x86\x00\x00")

func fixtureResourcesJsonBytes() ([]byte, error) {
	return bindataRead(
		_fixtureResourcesJson,
		"fixture/resources.json",
	)
}

func fixtureResourcesJson() (*asset, error) {
	bytes, err := fixtureResourcesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixture/resources.json", size: 34415, mode: os.FileMode(420), modTime: time.Unix(1526961421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fixtureSpecYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8c\x41\x0e\x83\x20\x10\x45\xf7\x9c\xe2\x87\x3d\x75\xd9\x84\x6b\xf4\x04\x14\x87\x38\x49\x05\x9c\x01\x1b\x6f\xdf\x58\x63\xed\xee\xe7\xfd\x97\xe7\x9c\x33\x4a\xb2\x72\x24\xf5\x06\xb0\x5b\xe2\x6c\xf7\x05\xd4\xd0\x26\x3d\x26\x60\x87\xf5\x3e\x24\xce\x21\x47\x1a\x96\x5e\x1a\xd9\xf3\xda\x4d\x09\x33\x35\x12\xbd\x98\xc3\x48\x1a\x85\x6b\xe3\x92\x3d\xec\xa3\x52\xe4\xc4\xa4\x78\x4f\x1c\x27\xe8\x36\x3f\xcb\x4b\xd1\x0a\xaa\x94\x95\x47\xc2\x37\xab\x48\x45\x6e\xf6\xd7\x01\x72\x98\xc9\x9f\xfe\x1f\x17\x5a\x3a\x0b\x8d\x1e\x4d\x3a\x99\x0b\x6b\xe9\x12\xc9\x1f\x3d\xf3\x09\x00\x00\xff\xff\xa9\x2f\x74\x9e\xe3\x00\x00\x00")

func fixtureSpecYmlBytes() ([]byte, error) {
	return bindataRead(
		_fixtureSpecYml,
		"fixture/spec.yml",
	)
}

func fixtureSpecYml() (*asset, error) {
	bytes, err := fixtureSpecYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixture/spec.yml", size: 227, mode: os.FileMode(420), modTime: time.Unix(1526351673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fixture/resources.json": fixtureResourcesJson,
	"fixture/spec.yml": fixtureSpecYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"fixture": &bintree{nil, map[string]*bintree{
		"resources.json": &bintree{fixtureResourcesJson, map[string]*bintree{}},
		"spec.yml": &bintree{fixtureSpecYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

